{"ast":null,"code":"var _jsxFileName = \"/Users/takiacademy/Desktop/pdf-editor/src/components/pdfApp.js\";\nimport React, { useState } from 'react';\nimport PdfEditor from './pdfEditor';\nimport PdfViewer from './pdfViewer';\nimport { PDFDocument, StandardFonts } from 'pdf-lib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PdfApp = () => {\n  // const [selectedPdf, setSelectedPdf] = useState(null);\n  // const [pdfContent, setPdfContent] = useState('');\n  // const [modifiedPdfUrl, setModifiedPdfUrl] = useState('');\n  // const [numPages, setNumPages] = useState(null);\n  // const [currentPage, setCurrentPage] = useState(1);\n\n  // const handlePdfUpload = (file) => {\n  //     setSelectedPdf(file);\n  //     setModifiedPdfUrl('');\n  //     setCurrentPage(1);\n  // };\n\n  // const handleAddText = async () => {\n  //     try {\n  //         const pdfData = await selectedPdf.arrayBuffer();\n  //         const pdfDoc = await PDFDocument.load(pdfData);\n  //         const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);\n\n  //         const pages = pdfDoc.getPages();\n  //         pages.forEach((page) => {\n  //             page.drawText(pdfContent, {\n  //                 x: 50,\n  //                 y: page.getHeight() - 50,\n  //                 font: helveticaFont,\n  //                 size: 24,\n  //                 color: '#000000',\n  //             });\n  //         });\n\n  //         const modifiedPdfBytes = await pdfDoc.save();\n  //         const modifiedPdfDataUri = URL.createObjectURL(\n  //             new Blob([modifiedPdfBytes], { type: 'application/pdf' })\n  //         );\n\n  //         setModifiedPdfUrl(modifiedPdfDataUri);\n  //         console.log(modifiedPdfDataUri)\n  //         setNumPages(pages.length);\n  //     } catch (error) {\n  //         console.log('Error:', error);\n  //     }\n  // };\n  // const handlePageChange = (newPage) => {\n  //     setCurrentPage(newPage);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pdf-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"PDF Editor App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PdfViewer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_c = PdfApp;\nexport default PdfApp;\nvar _c;\n$RefreshReg$(_c, \"PdfApp\");","map":{"version":3,"names":["React","useState","PdfEditor","PdfViewer","PDFDocument","StandardFonts","jsxDEV","_jsxDEV","PdfApp","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/takiacademy/Desktop/pdf-editor/src/components/pdfApp.js"],"sourcesContent":["import React, { useState } from 'react';\n\nimport PdfEditor from './pdfEditor';\nimport PdfViewer from './pdfViewer';\nimport { PDFDocument, StandardFonts } from 'pdf-lib';\n\nconst PdfApp = () => {\n    // const [selectedPdf, setSelectedPdf] = useState(null);\n    // const [pdfContent, setPdfContent] = useState('');\n    // const [modifiedPdfUrl, setModifiedPdfUrl] = useState('');\n    // const [numPages, setNumPages] = useState(null);\n    // const [currentPage, setCurrentPage] = useState(1);\n\n    // const handlePdfUpload = (file) => {\n    //     setSelectedPdf(file);\n    //     setModifiedPdfUrl('');\n    //     setCurrentPage(1);\n    // };\n\n    // const handleAddText = async () => {\n    //     try {\n    //         const pdfData = await selectedPdf.arrayBuffer();\n    //         const pdfDoc = await PDFDocument.load(pdfData);\n    //         const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica);\n\n    //         const pages = pdfDoc.getPages();\n    //         pages.forEach((page) => {\n    //             page.drawText(pdfContent, {\n    //                 x: 50,\n    //                 y: page.getHeight() - 50,\n    //                 font: helveticaFont,\n    //                 size: 24,\n    //                 color: '#000000',\n    //             });\n    //         });\n\n    //         const modifiedPdfBytes = await pdfDoc.save();\n    //         const modifiedPdfDataUri = URL.createObjectURL(\n    //             new Blob([modifiedPdfBytes], { type: 'application/pdf' })\n    //         );\n\n    //         setModifiedPdfUrl(modifiedPdfDataUri);\n    //         console.log(modifiedPdfDataUri)\n    //         setNumPages(pages.length);\n    //     } catch (error) {\n    //         console.log('Error:', error);\n    //     }\n    // };\n    // const handlePageChange = (newPage) => {\n    //     setCurrentPage(newPage);\n    // };\n\n    return (\n        <div className=\"pdf-app\">\n            <h1>PDF Editor App</h1>\n            <PdfViewer ></PdfViewer>\n\n            {/* <PdfEditor\n                selectedPdf={selectedPdf}\n                pdfContent={pdfContent}\n                onTextChange={setPdfContent}\n                onAddText={handleAddText}\n                modifiedPdfUrl={modifiedPdfUrl}\n                numPages={numPages}\n                currentPage={currentPage}\n                onPageChange={handlePageChange}\n            /> */}\n\n\n        </div>\n    );\n};\n\nexport default PdfApp;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,WAAW,EAAEC,aAAa,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACjB;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACID,OAAA;IAAKE,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACpBH,OAAA;MAAAG,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBP,OAAA,CAACJ,SAAS;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAcvB,CAAC;AAEd,CAAC;AAACC,EAAA,GAjEIP,MAAM;AAmEZ,eAAeA,MAAM;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}